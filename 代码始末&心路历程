  应老师的要求，画出业务环节的流程图（拓扑图）。借助的框架是EasyUI和qunee，对于qunee来说，画图的基础是需要的是一个图的存储信息：结点和连接结点的边，数据的格式以JSON形式呈现。数据格式大致就是如此了
 JSON格式数据

                        {
                          "nodes":[{"id":"", "name":"", "x":"", "y":""}, ....],
                          "edges":[{"name":"", "from":"", "to":""}, .....]
                         }

  由于数据库表中环节的信息是有序的，要找到环节的id， name以及它们之间的逻辑关系是比较容易的，难点就在于node的“x”，“y”值如何来设置（数据库表中并没有位置信息）。开始的时候想的比较简单，感觉后面的环节应该在前一环节中心线两侧对称存在，于是就风风火火的写了代码。但是，写完之后却发现，当分裂环节比较多的时候，我这样设计的结点很容易就重合在一起了。当时苦恼了很长时间，也想过去深度遍历来确定结点位置信息，但是由于思想禁锢，总是感觉需要以链表来存储这些数据才可能去深度遍历。于是就没有深入想怎么去实现【其实，大概是我觉得id， name这些信息才比较重要，为了位置花费太多时间不值得】。但是图的结点比较多的时候如果位置不确定确实就不能画出图。
  
  纠结了很长时间，最后去问了老师，然后才发现确实需要用深度遍历来实现位置信息的设置。然后参考了网上的一篇论文【流程图布局算法实现 http://www.doc88.com/p-2068920847561.html】，才明白我画流程图的重点根本就是布局了，因为数据的获取实在太简单了。读了之后，发现原来“x”位置信息可以靠划分“等级”来实现，其实就是给这些结点分配他们应该在哪一列；（开始的时候我想的简单，就直接是结点的步骤*固定值，，这种只适合一条直线的顺序图/(ㄒoㄒ)/~~），“y”的位置信息则由前一（多）个结点的最大值和最小值来实现（不得不说，与我开始想的中心线位置恰好相反，中心线的想法由于没法确定上下限，导致完全没法控制图的走势和布局）。而上述两种操作均需要借助深度遍历图来实现（涉及到递归）。说到现在不得不感慨学以致用的重要性，明明才看过DFS，BFS就是想不起来应用，而且看的时候感觉这递归用的好晕...
 
  晚上9点开始看论文，理解了算法思想后，想象了一下这个程序运行的情景，思路算是明了了。
 
  11号早上，我决定不借助以前的代码认认真真的一行一行来写出来这个程序。于是开始一行一行的按照思路来，1.从数据库中获取初始数据 2.深度遍历，划分等级 3.深度遍历，设置每个节点的范围（即上下限） 4.根据2，3步骤的成果去算x， y坐标【x = width/max_level * level; y = (max + min ) / 2】,算是等分思想吧。开始写划分等级的时候，大胆的按照自己的理解写了递归代码（关键在于清晰递归出口条件和能够支持下一次递归的先行条件），虽然思路很清晰，还是很担心，因为我总是觉得递归代码出错了的话，很难找出错误点在哪。但是，既然决定写了，也管不了会不会出错了，刚写好等级划分的时候，心情非常复杂：既期望能正确运行，又害怕出错出的很离谱。然后运行了一下，果然出错了，不过是一些语法错误，比如什么多写了个括号。然后改过来之后发现尽然输出来的是空数组。心里当时一凉，感觉完了，还是硬着头皮去测试，却发现其实运行过程中数据变化是正确的，不过却发现数据总是一步步从有到无。开始以为是设置的临时变量在运行过程中超过生存周期了，但是由于不了解虚拟机，导致这个错误我没法去断定。后来，去网上查了一下，发现竟然有好多这个错误，原因是二维数组只传名的话无法改变二维数组的值。递归处理多维数组时，[地址传参为什么不能改变数组值 http://zhidao.baidu.com/link?url=YJzq9XxEUTXXTMgof6wUvZYCXrOPxmZYHwCzA_2TY34zhlVOkSQavXU_pNqpSzab_UHcsQQjcl52h44q90PJ2Ga71Q1lNRHPrbPo70mNpaq] ，后来加了&后发现竟然报了严重错误，[Fatal error: Call-time pass-by-reference has been removed http://zhidao.baidu.com/link?url=J2xvO3cComGRVWdYeo5CSUeTa-mrwBPmdiNDeyPiWRnQ02sjmg6sgvToUDMzcFLJr6HJUBryLZLEvQ_09mEPY_]，原来PHP调用的时候不需要加&（感觉PHP好神奇，这么简单让我怀疑以前对编程语言的认知）。最后把这个改过来后，没想到数据竟然貌似全对了，说貌似是因为最后一个数据是null，仔细看了代码发现原来是递归的出口条件搞错了。最后等级划分终于正确。

  有了深度遍历的经验，再写代码去设置Y坐标就比较快了，也没有出太多差错，就是发现数据偏离了规定值，开始我觉得大概是信息录入的不正确，也就没有多想。截止到现在已经是11号晚上的11点。
  12号，也就是今天，早上，仔细一想，我其实离画出图还有一段距离，因为没有把合适的json数据整理好，然后便写了代码去整合，中间由于粗心也出了大大小小一些错误，不过不严重。最后用得到的数据去画了图，发现图竟然完全没法看，我以为是逻辑错了，仔细看了后发现边之间的信息，发现没错，但是由于不自信和不放心还是把数据库的信息重新捋了一遍。然而，出来的图还是错，甚至少了一个结点（其实是两个节点重合在一起了）。然后就想到是不是因为y坐标不正确导致的，中午吃饭也心不在焉，中午觉也没睡着，仔仔细细想了一遍，发现原来的做法确实不妥，会出现在前一节点没有访问过的情况下去设置后面结点的位置（深度遍历），然后重新设置了标志信息，又捋了一遍代码，把可能出现的情况都写了出来，还简化了代码，不过，还是出现了意外，前9个的位置信息都是正确的，后面的几个却是空值，这让我感觉非常不可思议，难道是没有遍历完？！经过几次测试，我确定肯定是遍历完了所有节点，而后面几个结点没有位置信息根源应该是在第一个没有位置信息的点上，于是就仔细分析了一遍遍历这个结点时的情景，果然，在合拢的时候求最小值的条件让我给写错了，本来应该是没有设置的情况下退出，我却来了个反着的[由于我的判断条件是if($min)，有一个合拢前的结点由于$min是0而成功的走了下去，导致一个合拢正确，一个错误，不过感觉好可怕，如果当时幸运都对了，我就发现不了这个bug了，然后赶紧改成了isset（$min）来作为判断条件]。然后改了过来之后，所有的位置信息终于正确了，随后不放心还手动计算了一下，确实是正确的。这个时候图也正确显示出来了，不过是倒着的，问了老师后才知道原来坐标原点是在左上角的缘故（与我平常的认知不一致，哈哈，早知道这样，就反着画图了~~~），ps：刚刚贱贱的试了一下，果然正确，O(∩_∩)O。然后还是有点小bug，这个信息提示我完全不知道错在了哪，问了老师后才知道原来是最后一条边只有一个点，不应该存在的缘故。感觉老师好厉害，哈哈哈，问什么都知道。

  这两天完全是“终日不食不觉饿，终夜不寐不觉困”的状态，由于代码达到了想要的效果，晚上兴奋的2点多还睡不着，但是早上6点就醒了。哈哈，第一次这么投入，感觉还是挺高兴的，不过完全投入，吃饭睡觉都在想代码的生活还是不要长期有的好，感觉身体受不了，不过或许这就是我成不了大神的原因吧，嘿嘿嘿(●ˇ∀ˇ●)

  接下来，附上代码，高兴一番，哈哈哈，风格不好，见谅

  最后，感叹一句，好的论文很重要哇！！还有就是，如果写代码前思路足够清晰，而且掌握了算法的精髓的话，代码简直就是手到擒来，以前总觉得写代码难，其实应该是不懂算法，不会分析，所以没有思路，只能一气乱写，最后错误百出.
